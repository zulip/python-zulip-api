#!/usr/bin/env python3
import argparse
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

flags = argparse.ArgumentParser(description="Google Calendar Bot")
flags.add_argument(
    "--noauth_local_webserver",
    action="store_true",
    help="Run OAuth flow in console instead of opening a web browser.",
)
args = flags.parse_args()

# If modifying these scopes, delete your previously saved credentials
# at zulip/bots/gcal/
# NOTE: When adding more scopes, add them after the previous one in the same field, with a space
# seperating them.
SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]
# This file contains the information that google uses to figure out which application is requesting
# this client's data.
CLIENT_SECRET_FILE = "client_secret.json"  # noqa: S105
APPLICATION_NAME = "Zulip Calendar Bot"
HOME_DIR = os.path.expanduser("~")
CREDENTIALS_PATH = os.path.join(HOME_DIR, "google-credentials.json")


def get_credentials() -> Credentials:
    """Gets valid user credentials from storage.

    If nothing has been stored, or if the stored credentials are invalid,
    the OAuth2 flow is completed to obtain the new credentials.

    Returns:
        Credentials, the obtained credential.
    """

    creds = None

    # Check if the credentials file exists
    if os.path.exists(CREDENTIALS_PATH):
        creds = Credentials.from_authorized_user_file(CREDENTIALS_PATH, SCOPES)

    # If there are no valid credentials, initiate the OAuth flow
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                os.path.join(HOME_DIR, CLIENT_SECRET_FILE), SCOPES
            )
            if args.noauth_local_webserver:
                creds = flow.run_console()
            else:
                creds = flow.run_local_server(port=0)

        # Save the credentials for future use
        with open(CREDENTIALS_PATH, "w") as token_file:
            token_file.write(creds.to_json())

        print("Storing credentials to " + CREDENTIALS_PATH)

    return creds  # Return the obtained credentials


get_credentials()
